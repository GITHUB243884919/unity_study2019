//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class OtherEventListennerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(OtherEventListenner), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Awake", Awake);
		L.RegFunction("scrollrectValueChangeHandler", scrollrectValueChangeHandler);
		L.RegFunction("OnApplicationQuit", OnApplicationQuit);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("inputvalueChangeAction", get_inputvalueChangeAction, set_inputvalueChangeAction);
		L.RegVar("inputeditEndAction", get_inputeditEndAction, set_inputeditEndAction);
		L.RegVar("togglevalueChangeAction", get_togglevalueChangeAction, set_togglevalueChangeAction);
		L.RegVar("scrollbarvalueChangeAction", get_scrollbarvalueChangeAction, set_scrollbarvalueChangeAction);
		L.RegVar("slidervalueChangeAction", get_slidervalueChangeAction, set_slidervalueChangeAction);
		L.RegVar("dropdownvalueChangeAction", get_dropdownvalueChangeAction, set_dropdownvalueChangeAction);
		L.RegVar("scrollrectvalueChangeAction", get_scrollrectvalueChangeAction, set_scrollrectvalueChangeAction);
		L.RegVar("onEvent", get_onEvent, set_onEvent);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Awake(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			OtherEventListenner obj = (OtherEventListenner)ToLua.CheckObject<OtherEventListenner>(L, 1);
			obj.Awake();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int scrollrectValueChangeHandler(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			OtherEventListenner obj = (OtherEventListenner)ToLua.CheckObject<OtherEventListenner>(L, 1);
			UnityEngine.Events.UnityAction<UnityEngine.Vector2> o = obj.scrollrectValueChangeHandler();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnApplicationQuit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			OtherEventListenner obj = (OtherEventListenner)ToLua.CheckObject<OtherEventListenner>(L, 1);
			obj.OnApplicationQuit();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_inputvalueChangeAction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			OtherEventListenner obj = (OtherEventListenner)o;
			StrValueChangeAction ret = obj.inputvalueChangeAction;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inputvalueChangeAction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_inputeditEndAction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			OtherEventListenner obj = (OtherEventListenner)o;
			StrValueChangeAction ret = obj.inputeditEndAction;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inputeditEndAction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_togglevalueChangeAction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			OtherEventListenner obj = (OtherEventListenner)o;
			BoolValueChangeAction ret = obj.togglevalueChangeAction;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index togglevalueChangeAction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_scrollbarvalueChangeAction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			OtherEventListenner obj = (OtherEventListenner)o;
			FloatValueChangeAction ret = obj.scrollbarvalueChangeAction;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index scrollbarvalueChangeAction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_slidervalueChangeAction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			OtherEventListenner obj = (OtherEventListenner)o;
			FloatValueChangeAction ret = obj.slidervalueChangeAction;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index slidervalueChangeAction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dropdownvalueChangeAction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			OtherEventListenner obj = (OtherEventListenner)o;
			IntValueChangeAction ret = obj.dropdownvalueChangeAction;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index dropdownvalueChangeAction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_scrollrectvalueChangeAction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			OtherEventListenner obj = (OtherEventListenner)o;
			RectValueChangeAction ret = obj.scrollrectvalueChangeAction;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index scrollrectvalueChangeAction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onEvent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			OtherEventListenner obj = (OtherEventListenner)o;
			System.Action<string> ret = obj.onEvent;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onEvent on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_inputvalueChangeAction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			OtherEventListenner obj = (OtherEventListenner)o;
			StrValueChangeAction arg0 = (StrValueChangeAction)ToLua.CheckDelegate<StrValueChangeAction>(L, 2);
			obj.inputvalueChangeAction = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inputvalueChangeAction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_inputeditEndAction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			OtherEventListenner obj = (OtherEventListenner)o;
			StrValueChangeAction arg0 = (StrValueChangeAction)ToLua.CheckDelegate<StrValueChangeAction>(L, 2);
			obj.inputeditEndAction = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inputeditEndAction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_togglevalueChangeAction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			OtherEventListenner obj = (OtherEventListenner)o;
			BoolValueChangeAction arg0 = (BoolValueChangeAction)ToLua.CheckDelegate<BoolValueChangeAction>(L, 2);
			obj.togglevalueChangeAction = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index togglevalueChangeAction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_scrollbarvalueChangeAction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			OtherEventListenner obj = (OtherEventListenner)o;
			FloatValueChangeAction arg0 = (FloatValueChangeAction)ToLua.CheckDelegate<FloatValueChangeAction>(L, 2);
			obj.scrollbarvalueChangeAction = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index scrollbarvalueChangeAction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_slidervalueChangeAction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			OtherEventListenner obj = (OtherEventListenner)o;
			FloatValueChangeAction arg0 = (FloatValueChangeAction)ToLua.CheckDelegate<FloatValueChangeAction>(L, 2);
			obj.slidervalueChangeAction = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index slidervalueChangeAction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_dropdownvalueChangeAction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			OtherEventListenner obj = (OtherEventListenner)o;
			IntValueChangeAction arg0 = (IntValueChangeAction)ToLua.CheckDelegate<IntValueChangeAction>(L, 2);
			obj.dropdownvalueChangeAction = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index dropdownvalueChangeAction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_scrollrectvalueChangeAction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			OtherEventListenner obj = (OtherEventListenner)o;
			RectValueChangeAction arg0 = (RectValueChangeAction)ToLua.CheckDelegate<RectValueChangeAction>(L, 2);
			obj.scrollrectvalueChangeAction = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index scrollrectvalueChangeAction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onEvent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			OtherEventListenner obj = (OtherEventListenner)o;
			System.Action<string> arg0 = (System.Action<string>)ToLua.CheckDelegate<System.Action<string>>(L, 2);
			obj.onEvent = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onEvent on a nil value");
		}
	}
}

