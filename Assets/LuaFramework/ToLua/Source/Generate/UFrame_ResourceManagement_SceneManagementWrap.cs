//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UFrame_ResourceManagement_SceneManagementWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UFrame.ResourceManagement.SceneManagement), typeof(UFrame.Common.Singleton<UFrame.ResourceManagement.SceneManagement>));
		L.RegFunction("Init", Init);
		L.RegFunction("LoadScene", LoadScene);
		L.RegFunction("New", _CreateUFrame_ResourceManagement_SceneManagement);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUFrame_ResourceManagement_SceneManagement(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UFrame.ResourceManagement.SceneManagement obj = new UFrame.ResourceManagement.SceneManagement();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UFrame.ResourceManagement.SceneManagement.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UFrame.ResourceManagement.SceneManagement obj = (UFrame.ResourceManagement.SceneManagement)ToLua.CheckObject<UFrame.ResourceManagement.SceneManagement>(L, 1);
			obj.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UFrame.ResourceManagement.SceneManagement obj = (UFrame.ResourceManagement.SceneManagement)ToLua.CheckObject<UFrame.ResourceManagement.SceneManagement>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
			obj.LoadScene(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

